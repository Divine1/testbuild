{"version":3,"sources":["components/header/index.js","components/layout.js","components/search/index.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["menuitem","HeaderComponent","react_default","a","createElement","className","map","data","index","key","Component","LayoutComponent","props","Fragment","header","children","SearchComponent","type","placeholder","label","image","IndexPage","layout","search","element","style","backgroundImage","App","react_router_dom","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAEMA,EAAW,CAAC,SAAS,QAAQ,cAmBpBC,mLAfP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEPL,EAASM,IAAI,SAACC,EAAKC,GAAN,OACTN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOI,IAAKD,GAAQD,cARjCG,aCSfC,EAVS,SAACC,GACrB,OACIV,EAAAC,EAAAC,cAAAF,EAAAC,EAAAU,SAAA,KACIX,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAAA,YACCQ,EAAMG,YCWJC,mLAbP,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SAAOa,KAAK,OAAOC,YAAY,sBAEnChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,mBATUK,aCCxBH,EAAK,CACP,CAACY,MAAQ,aAAaC,MAAO,mCAC7B,CAACD,MAAQ,UAAUC,MAAO,mCAC1B,CAACD,MAAQ,aAAaC,MAAO,mCAC7B,CAACD,MAAQ,QAAQC,MAAO,mCACxB,CAACD,MAAQ,OAAOC,MAAO,mCACvB,CAACD,MAAQ,mBAAmBC,MAAO,mCACnC,CAACD,MAAQ,WAAWC,MAAO,mCAC3B,CAACD,MAAQ,UAAUC,MAAO,mCAC1B,CAACD,MAAQ,cAAcC,MAAO,mCAC9B,CAACD,MAAQ,SAASC,MAAO,oCACzB,CAACD,MAAQ,UAAUC,MAAO,oCAC1B,CAACD,MAAQ,UAAUC,MAAO,qCAgCfC,mLAvBP,OACInB,EAAAC,EAAAC,cAACkB,EAAD,KACIpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXE,EAAKD,IAAI,SAACkB,EAAQhB,GAAT,OACLN,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,EAAOH,UAAU,MAC3BoB,MAAO,CACHC,gBAAiB,OAAOF,EAAQJ,MAAM,mBAb9CV,aCVTiB,MARf,WACE,OACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACI1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWV,MCMfW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3c1dcb41.chunk.js","sourcesContent":["import React,{Component} from 'react'\n\nconst menuitem = ['RANDOM','EARTH','COLLECTION']\n\nclass HeaderComponent extends Component{\n    render(){\n        return(\n            <div className=\"header\">\n                <div className=\"logo\"></div>\n                <div className=\"menu\">\n                    {\n                        menuitem.map((data,index)=>(\n                            <div className=\"item\" key={index}>{data}</div>\n                        ))\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default HeaderComponent;","import React,{Component} from 'react'\nimport HeaderComponent from './header'\n\nconst LayoutComponent = (props)=>{\n    return(\n        <>\n            <HeaderComponent />\n            <main>\n            {props.children}\n            </main>\n        </>\n    )\n}\nexport default LayoutComponent","import React,{Component} from 'react'\n\n\nclass SearchComponent extends Component{\n\n    render(){\n        return(\n            <div className=\"searchcomponent\">\n                <div className=\"text\">\n                    <input type=\"text\" placeholder=\"Free Collections\" />\n                </div>\n                <div className=\"button\">\n                    <div className=\"search\">Search</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchComponent;","import React,{Component} from 'react'\nimport LayoutComponent from './../components/layout';\nimport SearchComponent from './../components/search'\n\nconst data=[\n    {label : \"Continents\",image: \"/static/images/gallery/pic1.jpg\"},\n    {label : \"History\",image: \"/static/images/gallery/pic2.jpg\"},\n    {label : \"Landscapes\",image: \"/static/images/gallery/pic3.jpg\"},\n    {label : \"Birds\",image: \"/static/images/gallery/pic4.jpg\"},\n    {label : \"City\",image: \"/static/images/gallery/pic5.jpg\"},\n    {label : \"Iconic Buildings\",image: \"/static/images/gallery/pic6.jpg\"},\n    {label : \"Abstract\",image: \"/static/images/gallery/pic7.jpg\"},\n    {label : \"Animals\",image: \"/static/images/gallery/pic8.jpg\"},\n    {label : \"Electronics\",image: \"/static/images/gallery/pic9.jpg\"},\n    {label : \"Videos\",image: \"/static/images/gallery/pic10.jpg\"},\n    {label : \"Biology\",image: \"/static/images/gallery/pic11.jpg\"},\n    {label : \"Insects\",image: \"/static/images/gallery/pic13.jpg\"}\n\n\n]\n\nclass IndexPage extends Component{\n\n\n    render(){\n        return(\n            <LayoutComponent>\n                <div className=\"indexpage\">\n                    <SearchComponent />\n                    <div className=\"content\">\n                    {\n                        data.map((element,index)=>(\n                            <div key={index} className=\"img\" \n                            style={{\n                                backgroundImage: \"url(\"+element.image+\")\"\n                            }}>\n                            {/* <img src={element.image}></img> */}\n                            \n                            </div>\n                        ))\n                    }\n                    </div>\n                </div>\n            </LayoutComponent>\n        )\n    }\n}\n\nexport default IndexPage;","import React from 'react';\nimport {HashRouter,Route} from 'react-router-dom';\nimport IndexPage from './pages/index'\nfunction App() {\n  return (\n    <HashRouter>\n        <Route path=\"/\" component={IndexPage} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/scss/main.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}